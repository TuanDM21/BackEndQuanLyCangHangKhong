package com.project.quanlycanghangkhong.util;

import com.project.quanlycanghangkhong.model.Task;
import com.project.quanlycanghangkhong.model.TaskStatus;

import java.util.function.Predicate;

/**
 * üéØ TASK STATUS MAPPER: Map business status categories to TaskStatus enum v√† other conditions
 */
public class TaskStatusMapper {
    
    /**
     * ‚úÖ Map business status string to task filtering logic
     * @param status TaskStatus enum values: "IN_PROGRESS", "COMPLETED", "OVERDUE" (case-insensitive)
     * @return Predicate ƒë·ªÉ filter tasks
     */
    public static Predicate<Task> getStatusFilter(String status) {
        if (status == null || status.trim().isEmpty()) {
            return task -> true; // No filter
        }
        
        switch (status.toUpperCase().trim()) {
            case "IN_PROGRESS":
                // ‚úÖ IN_PROGRESS: Task c√≥ status = IN_PROGRESS
                return task -> TaskStatus.IN_PROGRESS.equals(task.getStatus());
                
            case "COMPLETED":
                // ‚úÖ COMPLETED: Task c√≥ status = COMPLETED
                return task -> TaskStatus.COMPLETED.equals(task.getStatus());
                
            case "OVERDUE":
                // ‚úÖ OVERDUE: Task c√≥ status = OVERDUE
                return task -> TaskStatus.OVERDUE.equals(task.getStatus());
                
            case "OPEN":
                // ‚úÖ OPEN: Task c√≥ status = OPEN
                return task -> TaskStatus.OPEN.equals(task.getStatus());
                
            default:
                return task -> true; // Invalid status, no filter
        }
    }
    
    /**
     * ‚úÖ Get TaskStatus enum for database query optimization (ch·ªâ cho completed v√† overdue)
     * @param status Business status string
     * @return TaskStatus enum ho·∫∑c null n·∫øu kh√¥ng map tr·ª±c ti·∫øp ƒë∆∞·ª£c
     */
    public static TaskStatus getDirectTaskStatus(String status) {
        if (status == null || status.trim().isEmpty()) {
            return null;
        }
        
        switch (status.toUpperCase().trim()) {
            case "IN_PROGRESS":
                return TaskStatus.IN_PROGRESS;
            case "COMPLETED":
                return TaskStatus.COMPLETED;
            case "OVERDUE":
                return TaskStatus.OVERDUE;
            case "OPEN":
                return TaskStatus.OPEN;
            default:
                return null; // Invalid status
        }
    }
    
    /**
     * ‚úÖ Check if status requires complex filtering (lu√¥n false v√¨ t·∫•t c·∫£ status ƒë·ªÅu map tr·ª±c ti·∫øp)
     * @param status TaskStatus enum string
     * @return false v√¨ t·∫•t c·∫£ status ƒë·ªÅu c√≥ th·ªÉ d√πng simple TaskStatus query
     */
    public static boolean requiresComplexFiltering(String status) {
        // T·∫•t c·∫£ status hi·ªán t·∫°i (IN_PROGRESS, COMPLETED, OVERDUE) ƒë·ªÅu map tr·ª±c ti·∫øp v·ªõi TaskStatus enum
        return false;
    }    /**
     * ‚úÖ Get description for status category
     * @param status Business status string
     * @return M√¥ t·∫£ v·ªÅ logic filtering
     */
    public static String getStatusDescription(String status) {
        if (status == null || status.trim().isEmpty()) {
            return "T·∫•t c·∫£ tasks";
        }
        
        switch (status.toLowerCase().trim()) {
            case "completed":
                return "Tasks ƒë√£ ho√†n th√†nh (status = COMPLETED)";
            case "in_progress":
                return "Tasks ƒëang th·ª±c hi·ªán (status = IN_PROGRESS)";
            case "open":
                return "Tasks m·ªõi t·∫°o ch∆∞a b·∫Øt ƒë·∫ßu (status = OPEN)";
            case "overdue":
                return "Tasks qu√° h·∫°n (status = OVERDUE)";
            case "pending":
                return "Tasks ƒëang ch·ªù x·ª≠ l√Ω (status = OPEN ho·∫∑c IN_PROGRESS)";
            case "urgent":
                return "Tasks c√≥ ƒë·ªô ∆∞u ti√™n cao (priority = HIGH ho·∫∑c URGENT)";
            default:
                return "Status kh√¥ng h·ª£p l·ªá";
        }
    }
}

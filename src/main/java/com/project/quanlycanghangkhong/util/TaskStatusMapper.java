package com.project.quanlycanghangkhong.util;

import com.project.quanlycanghangkhong.model.Task;
import com.project.quanlycanghangkhong.model.TaskStatus;
import com.project.quanlycanghangkhong.model.TaskPriority;

import java.util.function.Predicate;

/**
 * üéØ TASK STATUS MAPPER: Map business status categories to TaskStatus enum v√† other conditions
 */
public class TaskStatusMapper {
    
    /**
     * ‚úÖ Map business status string to task filtering logic
     * @param status Business status: "completed", "pending", "urgent", "overdue"
     * @return Predicate ƒë·ªÉ filter tasks
     */
    public static Predicate<Task> getStatusFilter(String status) {
        if (status == null || status.trim().isEmpty()) {
            return task -> true; // No filter
        }
        
        switch (status.toLowerCase().trim()) {
            case "completed":
                // ‚úÖ COMPLETED: Task c√≥ status = COMPLETED
                return task -> TaskStatus.COMPLETED.equals(task.getStatus());
                
            case "pending":
                // ‚úÖ PENDING: Task c√≥ status = OPEN ho·∫∑c IN_PROGRESS (ch∆∞a ho√†n th√†nh)
                return task -> TaskStatus.OPEN.equals(task.getStatus()) || 
                              TaskStatus.IN_PROGRESS.equals(task.getStatus());
                
            case "urgent":
                // ‚úÖ URGENT: Task c√≥ priority = HIGH ho·∫∑c URGENT (b·∫•t k·ªÉ status)
                return task -> TaskPriority.HIGH.equals(task.getPriority()) || 
                              TaskPriority.URGENT.equals(task.getPriority());
                
            case "overdue":
                // ‚úÖ OVERDUE: Task c√≥ status = OVERDUE
                return task -> TaskStatus.OVERDUE.equals(task.getStatus());
                
            default:
                return task -> true; // Invalid status, no filter
        }
    }
    
    /**
     * ‚úÖ Get TaskStatus enum for database query optimization (ch·ªâ cho completed v√† overdue)
     * @param status Business status string
     * @return TaskStatus enum ho·∫∑c null n·∫øu kh√¥ng map tr·ª±c ti·∫øp ƒë∆∞·ª£c
     */
    public static TaskStatus getDirectTaskStatus(String status) {
        if (status == null || status.trim().isEmpty()) {
            return null;
        }
        
        switch (status.toLowerCase().trim()) {
            case "completed":
                return TaskStatus.COMPLETED;
            case "overdue":
                return TaskStatus.OVERDUE;
            case "pending":
            case "urgent":
                // Kh√¥ng map tr·ª±c ti·∫øp ƒë∆∞·ª£c v√¨ c·∫ßn logic ph·ª©c t·∫°p h∆°n
                return null;
            default:
                return null;
        }
    }
    
    /**
     * ‚úÖ Check if status requires complex filtering (kh√¥ng th·ªÉ d√πng simple TaskStatus query)
     * @param status Business status string
     * @return true n·∫øu c·∫ßn filter ph·ª©c t·∫°p ·ªü application level
     */
    public static boolean requiresComplexFiltering(String status) {
        if (status == null || status.trim().isEmpty()) {
            return false;
        }
        
        switch (status.toLowerCase().trim()) {
            case "pending":  // C·∫ßn check multiple TaskStatus values
            case "urgent":   // C·∫ßn check TaskPriority thay v√¨ TaskStatus
                return true;
            case "completed":
            case "overdue":
                return false; // C√≥ th·ªÉ d√πng direct TaskStatus query
            default:
                return false;
        }
    }
    
    /**
     * ‚úÖ Get description for status category
     * @param status Business status string
     * @return M√¥ t·∫£ v·ªÅ logic filtering
     */
    public static String getStatusDescription(String status) {
        if (status == null || status.trim().isEmpty()) {
            return "T·∫•t c·∫£ tasks";
        }
        
        switch (status.toLowerCase().trim()) {
            case "completed":
                return "Tasks ƒë√£ ho√†n th√†nh (status = COMPLETED)";
            case "pending":
                return "Tasks ƒëang ch·ªù x·ª≠ l√Ω (status = OPEN ho·∫∑c IN_PROGRESS)";
            case "urgent":
                return "Tasks c√≥ ƒë·ªô ∆∞u ti√™n cao (priority = HIGH ho·∫∑c URGENT)";
            case "overdue":
                return "Tasks qu√° h·∫°n (status = OVERDUE)";
            default:
                return "Status kh√¥ng h·ª£p l·ªá";
        }
    }
}

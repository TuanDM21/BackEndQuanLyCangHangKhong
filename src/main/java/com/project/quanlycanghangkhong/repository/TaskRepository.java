package com.project.quanlycanghangkhong.repository;

import com.project.quanlycanghangkhong.model.Task;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.Optional;
import java.util.List;

@Repository
public interface TaskRepository extends JpaRepository<Task, Integer> {
    
    // ============== CORE TASK OPERATIONS (ƒêANG S·ª¨ D·ª§NG) ==============
    
    /**
     * üü¢ ƒêANG S·ª¨ D·ª§NG: L·∫•y t·∫•t c·∫£ task ch∆∞a b·ªã x√≥a m·ªÅm
     * ƒê∆∞·ª£c d√πng trong: getAllTaskDetails()
     */
    List<Task> findAllByDeletedFalse();
    
    /**
     * üü¢ ƒêANG S·ª¨ D·ª§NG: L·∫•y task theo ID v√† ch∆∞a b·ªã x√≥a m·ªÅm  
     * ƒê∆∞·ª£c d√πng trong: getTaskById(), getTaskDetailById(), createSubtask(), assignAttachmentsToTask()
     */
    Optional<Task> findByIdAndDeletedFalse(Integer id);
    
    // ============== ADJACENCY LIST MODEL (ƒêANG S·ª¨ D·ª§NG) ==============
    
    /**
     * üü¢ ƒêANG S·ª¨ D·ª§NG: T√¨m t·∫•t c·∫£ subtask theo ID cha trong m√¥ h√¨nh Adjacency List
     * ƒê∆∞·ª£c d√πng trong: getTaskDetailById() (recursive), getSubtasks()
     * @param parentId ID task cha
     * @return Danh s√°ch task con
     */
    List<Task> findByParentIdAndDeletedFalse(Integer parentId);
    
    /**
     * üü¢ ƒêANG S·ª¨ D·ª§NG: T√¨m t·∫•t c·∫£ task g·ªëc (task kh√¥ng c√≥ cha) trong m√¥ h√¨nh Adjacency List
     * ƒê∆∞·ª£c d√πng trong: getRootTasks()
     * @return Danh s√°ch task g·ªëc
     */
    List<Task> findByParentIsNullAndDeletedFalse();
    
    // ============== COUNT ROOT TASKS ONLY (FOR MY TASKS API) ==============
    
    /**
     * üü¢ COUNT: ƒê·∫øm tasks ƒë√£ t·∫°o nh∆∞ng ch∆∞a c√≥ assignment (ch·ªâ root tasks)
     * @param userId ID c·ªßa user
     * @return S·ªë l∆∞·ª£ng root task ƒë√£ t·∫°o nh∆∞ng ch∆∞a giao vi·ªác
     */
    @Query("SELECT COUNT(t) FROM Task t WHERE t.createdBy.id = :userId AND t.deleted = false " +
           "AND t.parent IS NULL " +
           "AND NOT EXISTS (SELECT a FROM Assignment a WHERE a.task = t)")
    long countCreatedRootTasksWithoutAssignments(@Param("userId") Integer userId);
    
    /**
     * üü¢ COUNT: ƒê·∫øm tasks ƒë√£ giao vi·ªác (ch·ªâ root tasks)
     * @param userId ID c·ªßa user ƒë√£ giao vi·ªác
     * @return S·ªë l∆∞·ª£ng root task ƒë√£ giao vi·ªác
     */
    @Query("SELECT COUNT(DISTINCT a.task) FROM Assignment a WHERE a.assignedBy.id = :userId " +
           "AND a.task.deleted = false AND a.task.parent IS NULL")
    long countAssignedRootTasksByUserId(@Param("userId") Integer userId);
    
    /**
     * üü¢ COUNT: ƒê·∫øm tasks ƒë∆∞·ª£c giao cho user tr·ª±c ti·∫øp (ch·ªâ root tasks)
     * @param userId ID c·ªßa user nh·∫≠n vi·ªác
     * @return S·ªë l∆∞·ª£ng root task ƒë∆∞·ª£c giao tr·ª±c ti·∫øp
     */
    @Query("SELECT COUNT(DISTINCT a.task) FROM Assignment a WHERE a.recipientType = 'user' " +
           "AND a.recipientId = :userId AND a.task.deleted = false AND a.task.parent IS NULL")
    long countReceivedRootTasksByUserId(@Param("userId") Integer userId);
    
    /**
     * üü¢ COUNT: ƒê·∫øm tasks ƒë∆∞·ª£c giao cho team (ch·ªâ root tasks)
     * @param teamId ID c·ªßa team
     * @return S·ªë l∆∞·ª£ng root task ƒë∆∞·ª£c giao cho team
     */
    @Query("SELECT COUNT(DISTINCT a.task) FROM Assignment a WHERE a.recipientType = 'team' " +
           "AND a.recipientId = :teamId AND a.task.deleted = false AND a.task.parent IS NULL")
    long countReceivedRootTasksByTeamId(@Param("teamId") Integer teamId);
    
    /**
     * üü¢ COUNT: ƒê·∫øm tasks ƒë∆∞·ª£c giao cho unit (ch·ªâ root tasks)
     * @param unitId ID c·ªßa unit
     * @return S·ªë l∆∞·ª£ng root task ƒë∆∞·ª£c giao cho unit
     */
    @Query("SELECT COUNT(DISTINCT a.task) FROM Assignment a WHERE a.recipientType = 'unit' " +
           "AND a.recipientId = :unitId AND a.task.deleted = false AND a.task.parent IS NULL")
    long countReceivedRootTasksByUnitId(@Param("unitId") Integer unitId);
    
    // ============== SEARCH & FILTER (H·ªÆU √çCH CHO FRONTEND) ==============
    
    /**
     * üü¢ H·ªÆU √çCH: T√¨m ki·∫øm task theo title (case-insensitive)
     * D√πng cho: Search functionality trong frontend
     * @param title T·ª´ kh√≥a t√¨m ki·∫øm trong title
     * @return Danh s√°ch task c√≥ title ch·ª©a t·ª´ kh√≥a
     */
    List<Task> findByTitleContainingIgnoreCaseAndDeletedFalse(String title);
    
    /**
     * üü¢ H·ªÆU √çCH: T√¨m ki·∫øm task theo title ho·∫∑c content
     * D√πng cho: Advanced search trong frontend  
     * @param title T·ª´ kh√≥a t√¨m trong title
     * @param content T·ª´ kh√≥a t√¨m trong content
     * @return Danh s√°ch task match
     */
    List<Task> findByTitleContainingIgnoreCaseOrContentContainingIgnoreCaseAndDeletedFalse(String title, String content);
    
    /**
     * üü¢ H·ªÆU √çCH: L·ªçc task theo priority
     * D√πng cho: Filter by priority trong frontend
     * @param priority Priority level
     * @return Danh s√°ch task c√≥ priority c·ª• th·ªÉ
     */
    List<Task> findByPriorityAndDeletedFalse(com.project.quanlycanghangkhong.model.TaskPriority priority);
    
    // ============== OPTIMIZED METHODS FOR MY TASKS API ==============
    
    /**
     * üü¢ OPTIMIZED: L·∫•y tasks ƒë√£ t·∫°o nh∆∞ng ch∆∞a c√≥ assignment (type=created)
     * Thay th·∫ø: findAllByDeletedFalse() + filter stream
     * @param userId ID c·ªßa user
     * @return Danh s√°ch task ƒë√£ t·∫°o nh∆∞ng ch∆∞a giao vi·ªác
     */
    @Query("SELECT t FROM Task t WHERE t.createdBy.id = :userId AND t.deleted = false " +
           "AND NOT EXISTS (SELECT a FROM Assignment a WHERE a.task = t) " +
           "ORDER BY t.updatedAt DESC, t.createdAt DESC")
    List<Task> findCreatedTasksWithoutAssignments(@Param("userId") Integer userId);
    
    /**
     * üü¢ OPTIMIZED: L·∫•y tasks ƒë√£ giao vi·ªác (type=assigned)  
     * Thay th·∫ø: assignmentRepository.findAll() + filter stream
     * @param userId ID c·ªßa user ƒë√£ giao vi·ªác
     * @return Danh s√°ch task ƒë√£ giao vi·ªác (sort m·ªõi nh·∫•t)
     */
    @Query("SELECT DISTINCT a.task FROM Assignment a WHERE a.assignedBy.id = :userId AND a.task.deleted = false " +
           "ORDER BY a.task.updatedAt DESC, a.task.createdAt DESC")
    List<Task> findAssignedTasksByUserId(@Param("userId") Integer userId);
    
    /**
     * üü¢ OPTIMIZED: L·∫•y tasks ƒë∆∞·ª£c giao cho user tr·ª±c ti·∫øp (type=received, recipientType=user)
     * @param userId ID c·ªßa user nh·∫≠n vi·ªác
     * @return Danh s√°ch task ƒë∆∞·ª£c giao tr·ª±c ti·∫øp (sort m·ªõi nh·∫•t)
     */
    @Query("SELECT DISTINCT a.task FROM Assignment a WHERE a.recipientType = 'user' " +
           "AND a.recipientId = :userId AND a.task.deleted = false " +
           "ORDER BY a.task.updatedAt DESC, a.task.createdAt DESC")
    List<Task> findReceivedTasksByUserId(@Param("userId") Integer userId);
    
    /**
     * üü¢ OPTIMIZED: L·∫•y tasks ƒë∆∞·ª£c giao cho team m√† user l√†m team lead (type=received, recipientType=team)
     * @param userId ID c·ªßa team lead
     * @param teamId ID c·ªßa team
     * @return Danh s√°ch task ƒë∆∞·ª£c giao cho team (sort m·ªõi nh·∫•t)
     */
    @Query("SELECT DISTINCT a.task FROM Assignment a WHERE a.recipientType = 'team' " +
           "AND a.recipientId = :teamId AND a.task.deleted = false " +
           "ORDER BY a.task.updatedAt DESC, a.task.createdAt DESC")
    List<Task> findReceivedTasksByTeamId(@Param("teamId") Integer teamId);
    
    /**
     * üü¢ OPTIMIZED: L·∫•y tasks ƒë∆∞·ª£c giao cho unit m√† user l√†m unit lead (type=received, recipientType=unit)
     * @param unitId ID c·ªßa unit
     * @return Danh s√°ch task ƒë∆∞·ª£c giao cho unit (sort m·ªõi nh·∫•t)
     */
    @Query("SELECT DISTINCT a.task FROM Assignment a WHERE a.recipientType = 'unit' " +
           "AND a.recipientId = :unitId AND a.task.deleted = false " +
           "ORDER BY a.task.updatedAt DESC, a.task.createdAt DESC")
    List<Task> findReceivedTasksByUnitId(@Param("unitId") Integer unitId);
    
    // ============== OPTIMIZED JOIN FETCH METHODS TO FIX N+1 QUERY PROBLEM ==============
    
    /**
     * üöÄ OPTIMIZED: Load task v·ªõi t·∫•t c·∫£ relationships trong 1 query (fix N+1 problem)
     * FIX MultipleBagFetchException: Ch·ªâ fetch assignments, attachments s·∫Ω load ri√™ng
     * @param id Task ID
     * @return Task v·ªõi assignments, createdBy, parent ƒë∆∞·ª£c fetch
     */
    @Query("SELECT DISTINCT t FROM Task t " +
           "LEFT JOIN FETCH t.assignments a " +
           "LEFT JOIN FETCH a.assignedBy " +
           "LEFT JOIN FETCH a.completedBy " +
           "LEFT JOIN FETCH t.createdBy " +
           "LEFT JOIN FETCH t.parent " +
           "WHERE t.id = :id AND t.deleted = false")
    Optional<Task> findTaskWithAllRelationships(@Param("id") Integer id);
    
    /**
     * üöÄ OPTIMIZED: Created tasks v·ªõi JOIN FETCH (fix N+1 problem)
     * FIX MultipleBagFetchException: Ch·ªâ fetch assignments
     * @param userId User ID
     * @return Tasks v·ªõi relationships ƒë∆∞·ª£c fetch
     */
    @Query("SELECT DISTINCT t FROM Task t " +
           "LEFT JOIN FETCH t.createdBy " +
           "WHERE t.createdBy.id = :userId AND t.deleted = false " +
           "AND NOT EXISTS (SELECT 1 FROM Assignment asn WHERE asn.task = t) " +
           "ORDER BY t.updatedAt DESC")
    List<Task> findCreatedTasksWithAllRelationships(@Param("userId") Integer userId);
    
    /**
     * üöÄ OPTIMIZED: Assigned tasks v·ªõi JOIN FETCH (fix N+1 problem)
     * FIX MultipleBagFetchException: Ch·ªâ fetch assignments
     * @param userId User ID
     * @return Tasks v·ªõi relationships ƒë∆∞·ª£c fetch
     */
    @Query("SELECT DISTINCT t FROM Task t " +
           "LEFT JOIN FETCH t.assignments a " +
           "LEFT JOIN FETCH a.assignedBy " +
           "LEFT JOIN FETCH a.completedBy " +
           "LEFT JOIN FETCH t.createdBy " +
           "LEFT JOIN FETCH t.parent " +
           "JOIN t.assignments asn " +
           "WHERE asn.assignedBy.id = :userId AND t.deleted = false " +
           "ORDER BY t.updatedAt DESC")
    List<Task> findAssignedTasksWithAllRelationships(@Param("userId") Integer userId);
    
    /**
     * üöÄ OPTIMIZED: Received tasks v·ªõi JOIN FETCH (fix N+1 problem)
     * FIX MultipleBagFetchException: Ch·ªâ fetch assignments
     * @param userId User ID
     * @param teamId Team ID
     * @param unitId Unit ID
     * @return Tasks v·ªõi relationships ƒë∆∞·ª£c fetch
     */
    @Query("SELECT DISTINCT t FROM Task t " +
           "LEFT JOIN FETCH t.assignments a " +
           "LEFT JOIN FETCH a.assignedBy " +
           "LEFT JOIN FETCH a.completedBy " +
           "LEFT JOIN FETCH t.createdBy " +
           "LEFT JOIN FETCH t.parent " +
           "JOIN t.assignments asn " +
           "WHERE ((asn.recipientType = 'user' AND asn.recipientId = :userId) " +
           "OR (asn.recipientType = 'team' AND asn.recipientId = :teamId) " +
           "OR (asn.recipientType = 'unit' AND asn.recipientId = :unitId)) " +
           "AND t.deleted = false " +
           "ORDER BY t.updatedAt DESC")
    List<Task> findReceivedTasksWithAllRelationships(@Param("userId") Integer userId, 
                                                    @Param("teamId") Integer teamId, 
                                                    @Param("unitId") Integer unitId);
    
    // ============== OVERDUE SUPPORT METHODS ==============
    
    /**
     * üü¢ OVERDUE: T√¨m tasks c√≥ assignments overdue nh∆∞ng task status ch∆∞a ph·∫£i OVERDUE ho·∫∑c COMPLETED
     * @return Danh s√°ch task c·∫ßn c·∫≠p nh·∫≠t status
     */
    @Query("SELECT DISTINCT t FROM Task t JOIN t.assignments a WHERE " +
           "a.dueAt IS NOT NULL AND a.dueAt < CURRENT_TIMESTAMP " +
           "AND a.status != 'DONE' AND t.status NOT IN ('OVERDUE', 'COMPLETED') " +
           "AND t.deleted = false")
    List<Task> findTasksWithOverdueAssignments();
    
    /**
     * üü¢ OVERDUE: ƒê·∫øm s·ªë task overdue c·ªßa user
     * @param userId User ID
     * @return S·ªë l∆∞·ª£ng task overdue
     */
    @Query("SELECT COUNT(DISTINCT t) FROM Task t JOIN t.assignments a WHERE " +
           "((a.recipientType = 'user' AND a.recipientId = :userId) OR " +
           " (a.recipientType = 'team' AND a.recipientId IN " +
           "  (SELECT u.team.id FROM User u WHERE u.id = :userId)) OR " +
           " (a.recipientType = 'unit' AND a.recipientId IN " +
           "  (SELECT u.unit.id FROM User u WHERE u.id = :userId))) " +
           "AND t.status = 'OVERDUE' AND t.deleted = false")
    long countOverdueTasksForUser(@Param("userId") Integer userId);
    
    // ============== ADVANCED SEARCH METHODS FOR MY TASKS API ==============
    
    /**
     * üîç ADVANCED SEARCH: T√¨m ki·∫øm tasks ƒë√£ giao vi·ªác v·ªõi nhi·ªÅu ti√™u ch√≠ (Multi-select support)
     * @param userId ID c·ªßa user ƒë√£ giao vi·ªác
     * @param keyword T·ª´ kh√≥a t√¨m trong title ho·∫∑c content (c√≥ th·ªÉ null)
     * @param startTime Th·ªùi gian b·∫Øt ƒë·∫ßu (c√≥ th·ªÉ null)
     * @param endTime Th·ªùi gian k·∫øt th√∫c (c√≥ th·ªÉ null) 
     * @param priorities Danh s√°ch priority ƒë·ªÉ filter (c√≥ th·ªÉ empty)
     * @param recipientTypes Danh s√°ch recipient types (c√≥ th·ªÉ empty)
     * @param recipientIds Danh s√°ch recipient IDs t∆∞∆°ng ·ª©ng (c√≥ th·ªÉ empty)
     * @return Danh s√°ch task ƒë√£ giao vi·ªác th·ªèa m√£n ƒëi·ªÅu ki·ªán
     */
    @Query("SELECT DISTINCT a.task FROM Assignment a WHERE a.assignedBy.id = :userId AND a.task.deleted = false " +
           "AND (:keyword IS NULL OR " +
           "     (LOWER(a.task.title) LIKE LOWER(CONCAT('%', :keyword, '%')) OR " +
           "      LOWER(a.task.content) LIKE LOWER(CONCAT('%', :keyword, '%')))) " +
           "AND (:startTime IS NULL OR a.task.createdAt >= :startTime) " +
           "AND (:endTime IS NULL OR a.task.createdAt <= :endTime) " +
           "AND (:#{#priorities.isEmpty()} = true OR a.task.priority IN :priorities) " +
           "AND (:#{#recipientTypes.isEmpty()} = true OR " +
           "     (a.recipientType IN :recipientTypes AND a.recipientId IN :recipientIds)) " +
           "ORDER BY a.task.updatedAt DESC, a.task.createdAt DESC")
    List<Task> findAssignedTasksWithAdvancedSearchMulti(@Param("userId") Integer userId,
                                                        @Param("keyword") String keyword,
                                                        @Param("startTime") java.time.LocalDateTime startTime,
                                                        @Param("endTime") java.time.LocalDateTime endTime,
                                                        @Param("priorities") List<com.project.quanlycanghangkhong.model.TaskPriority> priorities,
                                                        @Param("recipientTypes") List<String> recipientTypes,
                                                        @Param("recipientIds") List<Integer> recipientIds);
    
    /**
     * üîç COUNT: ƒê·∫øm s·ªë l∆∞·ª£ng tasks ƒë√£ giao vi·ªác th·ªèa m√£n ƒëi·ªÅu ki·ªán t√¨m ki·∫øm (Multi-select support)
     * @param userId ID c·ªßa user ƒë√£ giao vi·ªác
     * @param keyword T·ª´ kh√≥a t√¨m ki·∫øm (c√≥ th·ªÉ null)
     * @param startTime Th·ªùi gian b·∫Øt ƒë·∫ßu (c√≥ th·ªÉ null)
     * @param endTime Th·ªùi gian k·∫øt th√∫c (c√≥ th·ªÉ null)
     * @param priorities Danh s√°ch priority ƒë·ªÉ filter (c√≥ th·ªÉ empty)
     * @param recipientTypes Danh s√°ch recipient types (c√≥ th·ªÉ empty)
     * @param recipientIds Danh s√°ch recipient IDs t∆∞∆°ng ·ª©ng (c√≥ th·ªÉ empty)
     * @return S·ªë l∆∞·ª£ng task th·ªèa m√£n ƒëi·ªÅu ki·ªán
     */
    @Query("SELECT COUNT(DISTINCT a.task) FROM Assignment a WHERE a.assignedBy.id = :userId AND a.task.deleted = false " +
           "AND (:keyword IS NULL OR " +
           "     (LOWER(a.task.title) LIKE LOWER(CONCAT('%', :keyword, '%')) OR " +
           "      LOWER(a.task.content) LIKE LOWER(CONCAT('%', :keyword, '%')))) " +
           "AND (:startTime IS NULL OR a.task.createdAt >= :startTime) " +
           "AND (:endTime IS NULL OR a.task.createdAt <= :endTime) " +
           "AND (:#{#priorities.isEmpty()} = true OR a.task.priority IN :priorities) " +
           "AND (:#{#recipientTypes.isEmpty()} = true OR " +
           "     (a.recipientType IN :recipientTypes AND a.recipientId IN :recipientIds))")
    long countAssignedTasksWithAdvancedSearchMulti(@Param("userId") Integer userId,
                                                   @Param("keyword") String keyword,
                                                   @Param("startTime") java.time.LocalDateTime startTime,
                                                   @Param("endTime") java.time.LocalDateTime endTime,
                                                   @Param("priorities") List<com.project.quanlycanghangkhong.model.TaskPriority> priorities,
                                                   @Param("recipientTypes") List<String> recipientTypes,
                                                   @Param("recipientIds") List<Integer> recipientIds);
}
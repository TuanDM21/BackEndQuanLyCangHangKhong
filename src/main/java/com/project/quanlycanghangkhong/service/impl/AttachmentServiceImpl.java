package com.project.quanlycanghangkhong.service.impl;

import com.project.quanlycanghangkhong.dto.AttachmentDTO;
import com.project.quanlycanghangkhong.dto.request.AttachmentAssignRequest;
import com.project.quanlycanghangkhong.model.Attachment;
import com.project.quanlycanghangkhong.model.Document;
import com.project.quanlycanghangkhong.model.User;
import com.project.quanlycanghangkhong.repository.AttachmentRepository;
import com.project.quanlycanghangkhong.repository.DocumentRepository;
import com.project.quanlycanghangkhong.repository.UserRepository;
import com.project.quanlycanghangkhong.service.AttachmentService;
import com.project.quanlycanghangkhong.service.FileShareService;
import com.project.quanlycanghangkhong.dto.FileShareDTO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class AttachmentServiceImpl implements AttachmentService {
    @Autowired
    private AttachmentRepository attachmentRepository;
    @Autowired
    private DocumentRepository documentRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private FileShareService fileShareService;

    // Th√™m import v√† dependency cho FileShareRepository
    @Autowired
    private com.project.quanlycanghangkhong.repository.FileShareRepository fileShareRepository;

    /**
     * L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ SecurityContext
     * @return User hi·ªán t·∫°i ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    private User getCurrentUser() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication != null && authentication.getName() != null) {
                String email = authentication.getName();
                return userRepository.findByEmail(email).orElse(null);
            }
        } catch (Exception e) {
            // Log error n·∫øu c·∫ßn
        }
        return null;
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i l√† owner c·ªßa attachment kh√¥ng
     * @param attachment Attachment c·∫ßn ki·ªÉm tra
     * @return true n·∫øu l√† owner, false n·∫øu kh√¥ng
     */
    private boolean isOwner(Attachment attachment) {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // Ch·ªâ ki·ªÉm tra owner - ai upload file th√¨ to√†n quy·ªÅn file ƒë√≥
        return attachment.getUploadedBy() != null && 
               attachment.getUploadedBy().getId().equals(currentUser.getId());
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn truy c·∫≠p attachment kh√¥ng (owner ho·∫∑c ƒë∆∞·ª£c chia s·∫ª)
     * @param attachment Attachment c·∫ßn ki·ªÉm tra
     * @return true n·∫øu c√≥ quy·ªÅn truy c·∫≠p, false n·∫øu kh√¥ng
     */
    private boolean hasReadAccess(Attachment attachment) {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // Owner lu√¥n c√≥ quy·ªÅn
        if (isOwner(attachment)) return true;
        
        // Ki·ªÉm tra file sharing
        FileShareDTO shareAccess = fileShareService.checkFileAccess(attachment.getId(), currentUser.getId());
        return shareAccess != null;
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn ch·ªânh s·ª≠a attachment kh√¥ng
     * @param attachment Attachment c·∫ßn ki·ªÉm tra
     * @return true n·∫øu c√≥ quy·ªÅn ch·ªânh s·ª≠a, false n·∫øu kh√¥ng
     */
    private boolean hasWriteAccess(Attachment attachment) {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // Owner lu√¥n c√≥ quy·ªÅn ch·ªânh s·ª≠a
        if (isOwner(attachment)) return true;
        
        // Ki·ªÉm tra file sharing v·ªõi quy·ªÅn write
        return fileShareService.hasWritePermission(attachment.getId(), currentUser.getId());
    }

    /**
     * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i l√† admin kh√¥ng
     * @return true n·∫øu l√† admin, false n·∫øu kh√¥ng
     */
    private boolean isAdmin() {
        User currentUser = getCurrentUser();
        if (currentUser == null) return false;
        
        // Ki·ªÉm tra role admin th√¥ng qua Role entity
        if (currentUser.getRole() != null && currentUser.getRole().getRoleName() != null) {
            String roleName = currentUser.getRole().getRoleName();
            return "admin".equalsIgnoreCase(roleName) || 
                   "administrator".equalsIgnoreCase(roleName) ||
                   "ADMIN".equals(roleName) ||
                   "Admin".equals(roleName);
        }
        
        // Backup check qua email n·∫øu role kh√¥ng c√≥
        return "admin@admin.com".equals(currentUser.getEmail());
    }

    private AttachmentDTO toDTO(Attachment att) {
        AttachmentDTO dto = new AttachmentDTO();
        dto.setId(att.getId());
        dto.setFilePath(att.getFilePath());
        dto.setFileName(att.getFileName());
        dto.setFileSize(att.getFileSize());
        dto.setCreatedAt(att.getCreatedAt());
        
        // Map owner information
        if (att.getUploadedBy() != null) {
            com.project.quanlycanghangkhong.dto.UserDTO ownerDto = new com.project.quanlycanghangkhong.dto.UserDTO();
            ownerDto.setId(att.getUploadedBy().getId());
            ownerDto.setName(att.getUploadedBy().getName());
            ownerDto.setEmail(att.getUploadedBy().getEmail());
            dto.setUploadedBy(ownerDto);
        }
        
        // üî• NEW: T√≠nh shared count (s·ªë l∆∞·ª£ng ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª)
        int sharedCount = fileShareRepository.countByAttachmentAndIsActiveTrue(att);
        dto.setSharedCount(sharedCount);
        
        return dto;
    }

    // üî• NEW: Method chuy√™n d·ª•ng cho "my files" - bao g·ªìm shared count
    private AttachmentDTO toDTOWithSharedCount(Attachment att) {
        return toDTO(att); // ƒê√£ bao g·ªìm shared count trong toDTO
    }

    // üî• NEW: Method chuy√™n d·ª•ng cho "shared with me" - kh√¥ng c·∫ßn shared count (v√¨ kh√¥ng ph·∫£i owner)
    private AttachmentDTO toDTOForSharedFile(Attachment att) {
        AttachmentDTO dto = new AttachmentDTO();
        dto.setId(att.getId());
        dto.setFilePath(att.getFilePath());
        dto.setFileName(att.getFileName());
        dto.setFileSize(att.getFileSize());
        dto.setCreatedAt(att.getCreatedAt());
        
        // Map owner information
        if (att.getUploadedBy() != null) {
            com.project.quanlycanghangkhong.dto.UserDTO ownerDto = new com.project.quanlycanghangkhong.dto.UserDTO();
            ownerDto.setId(att.getUploadedBy().getId());
            ownerDto.setName(att.getUploadedBy().getName());
            ownerDto.setEmail(att.getUploadedBy().getEmail());
            dto.setUploadedBy(ownerDto);
        }
        
        // ƒê·∫∑t shared count = null ho·∫∑c 0 v√¨ user kh√¥ng ph·∫£i owner
        dto.setSharedCount(0);
        
        return dto;
    }
    @Override
    public AttachmentDTO addAttachmentToDocument(Integer documentId, AttachmentDTO dto) {
        Document doc = documentRepository.findById(documentId).orElse(null);
        if (doc == null) return null;
        Attachment att = new Attachment();
        att.setDocument(doc);
        att.setFilePath(dto.getFilePath());
        att.setFileName(dto.getFileName());
        att.setFileSize(dto.getFileSize());
        att.setCreatedAt(LocalDateTime.now());
        return toDTO(attachmentRepository.save(att));
    }
    @Override
    public AttachmentDTO updateAttachment(Integer id, AttachmentDTO dto) {
        Attachment att = attachmentRepository.findById(id).orElse(null);
        if (att == null) return null;
        
        // üîí KI·ªÇM TRA QUY·ªÄN WRITE (owner ho·∫∑c shared v·ªõi quy·ªÅn READ-write)
        if (!hasWriteAccess(att)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a file n√†y. Ch·ªâ ng∆∞·ªùi upload file ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª quy·ªÅn ch·ªânh s·ª≠a m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán.");
        }
        
        att.setFilePath(dto.getFilePath());
        att.setFileName(dto.getFileName());
        att.setFileSize(dto.getFileSize());
        Attachment saved = attachmentRepository.save(att);
        return toDTO(saved);
    }
    
    @Override
    public AttachmentDTO updateAttachmentFileName(Integer id, String fileName) {
        Attachment att = attachmentRepository.findById(id).orElse(null);
        if (att == null) return null;
        
        // üîí KI·ªÇM TRA QUY·ªÄN WRITE (owner ho·∫∑c shared v·ªõi quy·ªÅn read-write)
        if (!hasWriteAccess(att)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a file n√†y. Ch·ªâ ng∆∞·ªùi upload file ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª quy·ªÅn ch·ªânh s·ª≠a m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán.");
        }
        
        att.setFileName(fileName);
        Attachment saved = attachmentRepository.save(att);
        return toDTO(saved);
    }
    
    @Override
    @org.springframework.transaction.annotation.Transactional
    public void deleteAttachment(Integer id) {
        Attachment att = attachmentRepository.findById(id).orElse(null);
        if (att != null) {
            // üîí CH·ªà OWNER M·ªöI C√ì QUY·ªÄN X√ìA (kh√¥ng cho ph√©p shared user x√≥a)
            if (!isOwner(att)) {
                throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a file n√†y. Ch·ªâ ng∆∞·ªùi upload file m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán.");
            }
            
            // üî• X√ìA T·∫§T C·∫¢ FILE SHARES (C·∫¢ ACTIVE V√Ä INACTIVE) LI√äN QUAN TR∆Ø·ªöC KHI SOFT DELETE
            List<com.project.quanlycanghangkhong.model.FileShare> allFileShares = 
                fileShareRepository.findByAttachment(att);
            if (!allFileShares.isEmpty()) {
                // Hard delete t·∫•t c·∫£ file shares ƒë·ªÉ tr√°nh foreign key constraint
                fileShareRepository.deleteAll(allFileShares);
            }
            
            // Th·ª±c hi·ªán soft delete attachment
            att.setDeleted(true);
            attachmentRepository.save(att);
        }
    }
    @Override
    public List<AttachmentDTO> getAttachmentsByDocumentId(Integer documentId) {
        return attachmentRepository.findByDocument_IdAndIsDeletedFalse(documentId).stream().map(this::toDTO).collect(Collectors.toList());
    }
    @Override
    public void assignAttachmentsToDocument(Integer documentId, AttachmentAssignRequest request) {
        Document doc = documentRepository.findById(documentId).orElse(null);
        if (doc == null || request == null || request.getAttachmentIds() == null) return;
        List<Attachment> attachments = attachmentRepository.findAllByIdIn(request.getAttachmentIds());
        for (Attachment att : attachments) {
            att.setDocument(doc);
        }
        attachmentRepository.saveAll(attachments);
    }
    @Override
    public void removeAttachmentsFromDocument(Integer documentId, AttachmentAssignRequest request) {
        if (request == null || request.getAttachmentIds() == null) return;
        List<Attachment> attachments = attachmentRepository.findAllByIdIn(request.getAttachmentIds());
        for (Attachment att : attachments) {
            if (att.getDocument() != null && att.getDocument().getId().equals(documentId)) {
                att.setDocument(null);
            }
        }
        attachmentRepository.saveAll(attachments);
    }
    @Override
    public List<AttachmentDTO> getAllAttachments() {
        // Ki·ªÉm tra quy·ªÅn admin
        if (!isAdmin()) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y. Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem t·∫•t c·∫£ file.");
        }
        
        // Admin c√≥ th·ªÉ xem t·∫•t c·∫£ file, k·ªÉ c·∫£ file ƒë√£ b·ªã x√≥a m·ªÅm
        List<Attachment> allAttachments = attachmentRepository.findAll();
        return allAttachments.stream().map(this::toDTO).collect(Collectors.toList());
    }
    @Override
    public AttachmentDTO getAttachmentById(Integer id) {
        Attachment att = attachmentRepository.findByIdAndIsDeletedFalse(id);
        if (att == null) return null;
        
        // üîí KI·ªÇM TRA QUY·ªÄN READ (owner ho·∫∑c ƒë∆∞·ª£c chia s·∫ª)
        if (!hasReadAccess(att)) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file n√†y.");
        }
        
        return toDTO(att);
    }

    @Override
    public List<AttachmentDTO> getMyAttachments() {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        // L·∫•y ch·ªâ file c·ªßa user hi·ªán t·∫°i (owner)
        List<Attachment> myFiles = attachmentRepository.findByUploadedByAndIsDeletedFalse(currentUser);
        return myFiles.stream().map(this::toDTO).collect(Collectors.toList());
    }

    /**
     * L·∫•y danh s√°ch file c√≥ quy·ªÅn truy c·∫≠p (bao g·ªìm file c·ªßa m√¨nh v√† file ƒë∆∞·ª£c chia s·∫ª)
     * @return Danh s√°ch file c√≥ quy·ªÅn truy c·∫≠p
     */
    @Override
    public List<AttachmentDTO> getAccessibleAttachments() {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        // L·∫•y file c·ªßa m√¨nh
        List<Attachment> myFiles = attachmentRepository.findByUploadedByAndIsDeletedFalse(currentUser);
        List<AttachmentDTO> result = myFiles.stream().map(this::toDTO).collect(Collectors.toList());
        
        // L·∫•y file ƒë∆∞·ª£c chia s·∫ª v·ªõi m√¨nh
        List<FileShareDTO> sharedFiles = fileShareService.getSharedWithMe();
        for (FileShareDTO shareDto : sharedFiles) {
            Attachment sharedAttachment = attachmentRepository.findByIdAndIsDeletedFalse(shareDto.getAttachmentId());
            if (sharedAttachment != null) {
                AttachmentDTO dto = toDTOForSharedFile(sharedAttachment);
                // Th√™m th√¥ng tin v·ªÅ quy·ªÅn chia s·∫ª
                dto.getClass(); // C√≥ th·ªÉ extend DTO ƒë·ªÉ th√™m field sharePermission n·∫øu c·∫ßn
                result.add(dto);
            }
        }
        
        return result;
    }
}

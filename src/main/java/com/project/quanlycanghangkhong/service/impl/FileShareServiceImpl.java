package com.project.quanlycanghangkhong.service.impl;

import com.project.quanlycanghangkhong.dto.FileShareDTO;
import com.project.quanlycanghangkhong.dto.UserDTO;
import com.project.quanlycanghangkhong.model.*;
import com.project.quanlycanghangkhong.repository.AttachmentRepository;
import com.project.quanlycanghangkhong.repository.FileShareRepository;
import com.project.quanlycanghangkhong.repository.UserRepository;
import com.project.quanlycanghangkhong.service.FileShareService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.ArrayList;

@Service
public class FileShareServiceImpl implements FileShareService {
    
    private static final Logger logger = LoggerFactory.getLogger(FileShareServiceImpl.class);
    
    @Autowired
    private FileShareRepository fileShareRepository;
    
    @Autowired
    private AttachmentRepository attachmentRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    /**
     * L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ SecurityContext
     */
    private User getCurrentUser() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication != null && authentication.getName() != null) {
                String email = authentication.getName();
                return userRepository.findByEmail(email).orElse(null);
            }
        } catch (Exception e) {
            logger.error("Error getting current user", e);
        }
        return null;
    }
    
    /**
     * Chuy·ªÉn ƒë·ªïi FileShare entity sang DTO (ƒë∆°n gi·∫£n t·ªëi ƒëa - kh√¥ng c√≥ permission, expires_at, note)
     */
    private FileShareDTO toDTO(FileShare fileShare) {
        FileShareDTO dto = new FileShareDTO();
        dto.setId(fileShare.getId());
        dto.setAttachmentId(fileShare.getAttachment().getId());
        dto.setFileName(fileShare.getAttachment().getFileName());
        dto.setFilePath(fileShare.getAttachment().getFilePath());
        dto.setFileSize(fileShare.getAttachment().getFileSize());
        dto.setSharedAt(fileShare.getSharedAt());
        dto.setNote(null); // Kh√¥ng c√≥ note
        dto.setActive(fileShare.isActive());
        
        // üî• NEW: T√≠nh shared count (s·ªë l∆∞·ª£ng ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª file n√†y)
        int sharedCount = fileShareRepository.countByAttachmentAndIsActiveTrue(fileShare.getAttachment());
        dto.setSharedCount(sharedCount);
        
        // Map user information
        if (fileShare.getSharedBy() != null) {
            UserDTO sharedByDto = new UserDTO();
            sharedByDto.setId(fileShare.getSharedBy().getId());
            sharedByDto.setName(fileShare.getSharedBy().getName());
            sharedByDto.setEmail(fileShare.getSharedBy().getEmail());
            dto.setSharedBy(sharedByDto);
        }
        
        if (fileShare.getSharedWith() != null) {
            UserDTO sharedWithDto = new UserDTO();
            sharedWithDto.setId(fileShare.getSharedWith().getId());
            sharedWithDto.setName(fileShare.getSharedWith().getName());
            sharedWithDto.setEmail(fileShare.getSharedWith().getEmail());
            dto.setSharedWith(sharedWithDto);
        }
        
        return dto;
    }
    
    @Override
    @Transactional
    public String shareFileWithUsers(Integer attachmentId, List<Integer> userIds) {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        Attachment attachment = attachmentRepository.findByIdAndIsDeletedFalse(attachmentId);
        if (attachment == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y file ƒë√≠nh k√®m.");
        }
        
        // Ch·ªâ owner m·ªõi c√≥ th·ªÉ chia s·∫ª file
        if (!attachment.getUploadedBy().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn chia s·∫ª file n√†y.");
        }
        
        List<String> successUsers = new ArrayList<>();
        List<String> failedUsers = new ArrayList<>();
        
        for (Integer userId : userIds) {
            try {
                // T√¨m user theo ID
                Optional<User> userOpt = userRepository.findById(userId);
                if (!userOpt.isPresent()) {
                    failedUsers.add("User ID " + userId + " (kh√¥ng t√¨m th·∫•y user)");
                    continue;
                }
                
                User targetUser = userOpt.get();
                
                // Kh√¥ng th·ªÉ chia s·∫ª cho ch√≠nh m√¨nh
                if (targetUser.getId().equals(currentUser.getId())) {
                    failedUsers.add(targetUser.getEmail() + " (kh√¥ng th·ªÉ chia s·∫ª cho ch√≠nh m√¨nh)");
                    continue;
                }
                
                // Ki·ªÉm tra xem ƒë√£ c√≥ active share ch∆∞a
                Optional<FileShare> activeShare = fileShareRepository
                    .findByAttachmentAndSharedWithAndIsActiveTrue(attachment, targetUser);
                
                if (activeShare.isPresent()) {
                    failedUsers.add(targetUser.getEmail() + " (ƒë√£ ƒë∆∞·ª£c chia s·∫ª)");
                    continue;
                }
                
                // Ki·ªÉm tra xem c√≥ inactive share kh√¥ng (ƒë·ªÉ reactivate)
                Optional<FileShare> inactiveShare = fileShareRepository
                    .findByAttachmentAndSharedWith(attachment, targetUser);
                
                if (inactiveShare.isPresent()) {
                    // Reactivate record c≈©
                    FileShare existingShare = inactiveShare.get();
                    existingShare.setActive(true);
                    existingShare.setSharedBy(currentUser); // Update shared_by n·∫øu c·∫ßn
                    fileShareRepository.save(existingShare);
                    successUsers.add(targetUser.getEmail() + " (reactivated)");
                    
                    logger.info("File share reactivated: User {} reactivated share of attachment {} with user ID {}", 
                        currentUser.getEmail(), attachmentId, userId);
                } else {
                    // T·∫°o file share m·ªõi
                    FileShare newShare = new FileShare();
                    newShare.setAttachment(attachment);
                    newShare.setSharedBy(currentUser);
                    newShare.setSharedWith(targetUser);
                    newShare.setActive(true);
                    
                    fileShareRepository.save(newShare);
                    successUsers.add(targetUser.getEmail());
                    
                    logger.info("File shared: User {} shared attachment {} with user ID {}", 
                        currentUser.getEmail(), attachmentId, userId);
                }
                
            } catch (Exception e) {
                logger.error("Error sharing file with user ID {}: {}", userId, e.getMessage());
                failedUsers.add("User ID " + userId + " (l·ªói h·ªá th·ªëng)");
            }
        }
        
        // T·∫°o th√¥ng b√°o k·∫øt qu·∫£
        StringBuilder result = new StringBuilder();
        if (!successUsers.isEmpty()) {
            result.append("Chia s·∫ª th√†nh c√¥ng v·ªõi ").append(successUsers.size()).append(" user: ")
                  .append(String.join(", ", successUsers));
        }
        
        if (!failedUsers.isEmpty()) {
            if (result.length() > 0) {
                result.append(". ");
            }
            result.append("Chia s·∫ª th·∫•t b·∫°i v·ªõi ").append(failedUsers.size()).append(" user: ")
                  .append(String.join(", ", failedUsers));
        }
        
        return result.toString();
    }
    
    @Override
    public List<FileShareDTO> getSharedWithMe() {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        // ƒê∆°n gi·∫£n h√≥a - kh√¥ng c·∫ßn ki·ªÉm tra expires_at
        List<FileShare> shares = fileShareRepository.findBySharedWithAndIsActiveTrueOrderBySharedAtDesc(currentUser);
        return shares.stream().map(this::toDTO).collect(Collectors.toList());
    }
    
    @Override
    public List<FileShareDTO> getMySharedFiles() {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        List<FileShare> shares = fileShareRepository.findBySharedByAndIsActiveTrueOrderBySharedAtDesc(currentUser);
        return shares.stream().map(this::toDTO).collect(Collectors.toList());
    }
    
    @Override
    public List<FileShareDTO> getFileSharesByAttachment(Integer attachmentId) {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        Attachment attachment = attachmentRepository.findByIdAndIsDeletedFalse(attachmentId);
        if (attachment == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y file ƒë√≠nh k√®m.");
        }
        
        // Ch·ªâ owner m·ªõi c√≥ th·ªÉ xem danh s√°ch ng∆∞·ªùi ƒë∆∞·ª£c chia s·∫ª
        if (!attachment.getUploadedBy().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch chia s·∫ª c·ªßa file n√†y.");
        }
        
        List<FileShare> shares = fileShareRepository.findByAttachmentAndIsActiveTrueOrderBySharedAtDesc(attachment);
        return shares.stream().map(this::toDTO).collect(Collectors.toList());
    }
    
    @Override
    @Transactional
    public String bulkRevokeAllShares(Integer attachmentId) {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        Attachment attachment = attachmentRepository.findByIdAndIsDeletedFalse(attachmentId);
        if (attachment == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y file ƒë√≠nh k√®m.");
        }
        
        // Ch·ªâ owner m·ªõi c√≥ th·ªÉ h·ªßy to√†n b·ªô chia s·∫ª
        if (!attachment.getUploadedBy().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy chia s·∫ª c·ªßa file n√†y.");
        }
        
        // L·∫•y t·∫•t c·∫£ active shares c·ªßa file n√†y
        List<FileShare> activeShares = fileShareRepository.findByAttachmentAndIsActiveTrueOrderBySharedAtDesc(attachment);
        
        if (activeShares.isEmpty()) {
            return "Kh√¥ng c√≥ chia s·∫ª n√†o ƒë·ªÉ h·ªßy";
        }
        
        // H·ªßy t·∫•t c·∫£ shares
        int revokedCount = 0;
        for (FileShare share : activeShares) {
            share.setActive(false);
            fileShareRepository.save(share);
            revokedCount++;
        }
        
        logger.info("Bulk revoked all shares: User {} revoked {} shares for attachment {}", 
            currentUser.getEmail(), revokedCount, attachmentId);
        
        return "ƒê√£ h·ªßy th√†nh c√¥ng " + revokedCount + " chia s·∫ª";
    }
    
    @Override
    @Transactional
    public String bulkRevokeMultipleUsers(Integer attachmentId, List<Integer> userIds) {
        User currentUser = getCurrentUser();
        if (currentUser == null) {
            throw new RuntimeException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh user hi·ªán t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        }
        
        Attachment attachment = attachmentRepository.findByIdAndIsDeletedFalse(attachmentId);
        if (attachment == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y file ƒë√≠nh k√®m.");
        }
        
        // Ch·ªâ owner m·ªõi c√≥ th·ªÉ h·ªßy chia s·∫ª
        if (!attachment.getUploadedBy().getId().equals(currentUser.getId())) {
            throw new RuntimeException("B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy chia s·∫ª c·ªßa file n√†y.");
        }
        
        List<String> successUsers = new ArrayList<>();
        List<String> failedUsers = new ArrayList<>();
        
        for (Integer userId : userIds) {
            try {
                // T√¨m user theo ID
                Optional<User> userOpt = userRepository.findById(userId);
                if (!userOpt.isPresent()) {
                    failedUsers.add("User ID " + userId + " (kh√¥ng t√¨m th·∫•y user)");
                    continue;
                }
                
                User targetUser = userOpt.get();
                
                // T√¨m active share gi·ªØa attachment v√† user n√†y
                Optional<FileShare> shareOpt = fileShareRepository
                    .findByAttachmentAndSharedWithAndIsActiveTrue(attachment, targetUser);
                
                if (!shareOpt.isPresent()) {
                    failedUsers.add(targetUser.getEmail() + " (kh√¥ng c√≥ chia s·∫ª active)");
                    continue;
                }
                
                // H·ªßy chia s·∫ª
                FileShare share = shareOpt.get();
                share.setActive(false);
                fileShareRepository.save(share);
                successUsers.add(targetUser.getEmail());
                
                logger.info("Bulk revoked share: User {} revoked share with user {} for attachment {}", 
                    currentUser.getEmail(), targetUser.getEmail(), attachmentId);
                    
            } catch (Exception e) {
                logger.error("Error revoking share for user ID {}: {}", userId, e.getMessage());
                failedUsers.add("User ID " + userId + " (l·ªói h·ªá th·ªëng)");
            }
        }
        
        // T·∫°o th√¥ng b√°o k·∫øt qu·∫£
        StringBuilder result = new StringBuilder();
        if (!successUsers.isEmpty()) {
            result.append("H·ªßy chia s·∫ª th√†nh c√¥ng v·ªõi ").append(successUsers.size()).append(" user: ")
                  .append(String.join(", ", successUsers));
        }
        
        if (!failedUsers.isEmpty()) {
            if (result.length() > 0) {
                result.append(". ");
            }
            result.append("H·ªßy chia s·∫ª th·∫•t b·∫°i v·ªõi ").append(failedUsers.size()).append(" user: ")
                  .append(String.join(", ", failedUsers));
        }
        
        return result.toString();
    }
    
    @Override
    public FileShareDTO checkFileAccess(Integer attachmentId, Integer userId) {
        Attachment attachment = attachmentRepository.findByIdAndIsDeletedFalse(attachmentId);
        if (attachment == null) {
            return null;
        }
        
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            return null;
        }
        
        // Ki·ªÉm tra owner - owner c√≥ th·ªÉ ch·ªânh s·ª≠a file
        if (attachment.getUploadedBy().getId().equals(userId)) {
            // Owner c√≥ full access - t·∫°o DTO gi·∫£ ƒë·ªÉ represent owner access
            FileShareDTO ownerAccess = new FileShareDTO();
            ownerAccess.setAttachmentId(attachmentId);
            ownerAccess.setActive(true);
            return ownerAccess;
        }
        
        // Ki·ªÉm tra shared access - shared users ch·ªâ c√≥ quy·ªÅn read
        Optional<FileShare> share = fileShareRepository
            .findByAttachmentAndSharedWithAndIsActiveTrue(attachment, user);
        
        return share.map(this::toDTO).orElse(null);
    }
    
    @Override
    public boolean hasWritePermission(Integer attachmentId, Integer userId) {
        Attachment attachment = attachmentRepository.findByIdAndIsDeletedFalse(attachmentId);
        if (attachment == null) {
            return false;
        }
        
        // Ch·ªâ owner m·ªõi c√≥ quy·ªÅn write, shared users lu√¥n read-only
        return attachment.getUploadedBy().getId().equals(userId);
    }
}